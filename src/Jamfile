SubDir TOP src ;

SubDirSysHdrs [ FDirName $(TOP) ] ;

# This is the list of locations where
# we have sources. If you add a location
# you have to add it here.

SEARCH_SOURCE += [ FDirName $(TOP) src ] ;
SEARCH_SOURCE += [ FDirName $(TOP) src interface ] ;

SEARCH_SOURCE += [ FDirName $(TOP) src media ] ;
SEARCH_SOURCE += [ FDirName $(TOP) src media api ] ;
SEARCH_SOURCE += [ FDirName $(TOP) src media node ] ;

SEARCH_SOURCE += [ FDirName $(TOP) src audio ] ;
SEARCH_SOURCE += [ FDirName $(TOP) src audio effects ] ;
SEARCH_SOURCE += [ FDirName $(TOP) src audio node ] ;

SEARCH_SOURCE += [ FDirName $(TOP) src views ] ;
SEARCH_SOURCE += [ FDirName $(TOP) src views track ] ;
SEARCH_SOURCE += [ FDirName $(TOP) src views track render ] ;
SEARCH_SOURCE += [ FDirName $(TOP) src views widgets ] ;

SEARCH_SOURCE += [ FDirName $(TOP) src windows ] ;
SEARCH_SOURCE += [ FDirName $(TOP) src windows tools ] ;
SEARCH_SOURCE += [ FDirName $(TOP) src windows misc ] ;

SEARCH_SOURCE += [ FDirName $(TOP) src settings ] ;
SEARCH_SOURCE += [ FDirName $(TOP) src settings panel ] ;

SEARCH_SOURCE += [ FDirName $(TOP) src common ] ;

# NOTE this is the location for headers needed to 
# access the BPrivate namespace data, only put such type of
# headers there. Will be removed once those APIs get stable,
# if not before a stable release also the cpp file should
# be bundled into the app.
SEARCH_SOURCE += [ FDirName $(TOP) src common private_headers ] ;


Application Faber :
	# User Experience
	Faber.cpp
	FaberWindow.cpp
	FaberView.cpp

	CommandServer.cpp

	StorageUtils.cpp
	ProjectManager.cpp
	WindowsManager.cpp

	TracksContainer.cpp
	TracksCommon.cpp

	ToolBar.cpp
	InfoToolBar.cpp
	FaberScrollBar.cpp
	TimeBar.cpp

	MenuBuilder.cpp

	# Faber Widgets
	FaberWidget.cpp
	TransportWidget.cpp
	ZoomWidget.cpp
	ToolsWidget.cpp
	DurationView.cpp
	WidgetFrame.cpp

	# TrackView implementations
	TrackView.cpp
	AudioTrackView.cpp
	
	# Render
	WaveRender.cpp

	# Various windows and related code
	ProgressWindow.cpp
	ExportWindow.cpp
	AboutWindow.cpp
	InputRequest.cpp
	InputRequestView.cpp
	EffectWindow.cpp
	ParameterWindow.cpp
	ParameterView.cpp

	# Interface
	SpinSlider.cpp
	PeakView.cpp
	VolumeSlider.cpp
	IconButton.cpp
	Spinner.cpp
	#LiveNodesMenu.cpp

	# Settings
	Settings.cpp
	SettingsManager.cpp
	FaberShortcut.cpp

	DefaultKeymap.cpp

	SettingsWindow.cpp
	SettingsView.cpp
	Engine.cpp
	Interface.cpp
	Keymap.cpp

	# Audio and Media internal API
	Track.cpp
	AudioTrack.cpp
	TrackIndex.cpp

	DataBlock.cpp
	MediaBlock.cpp
	MediaBlockMap.cpp

	TrackIO.cpp

	MediaGate.cpp
	AudioGate.cpp

	MediaFormatBuilder.cpp

	EffectsManager.cpp
	FaberEffect.cpp
	AudioEffect.cpp

	# Media Nodes
	AudioEngine.cpp

	# Media_kit improvement-API
	MediaEndPoint.cpp

	# Effects
	#SimpleEffects.cpp
	Amplifier.cpp
	BassBoost.cpp
	#Limiter.cpp
	Compressor.cpp
	#Normalize.cpp
	#Room.cpp
	#Reverb.cpp
	Delay.cpp

	: be media $(TARGET_LIBSTDC++) tracker translation localestub 
	: Faber.rdef ToolBarIcons.rdef
;

InstallBin $(FABER_DIRECTORY) : Faber ;
